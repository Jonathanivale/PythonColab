# -*- coding: utf-8 -*-
"""Classe Abstrata e Polimorfismo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W1jDSbH5cEDYVhHPMRCFg3LzG4Ct9N_6
"""

class Animal():
  def __init__(self):
    pass
  def locomove(self):
    pass

class Peixe(Animal):
  def locomove(self):
    print("Um Peixe Nada")

class Elefante(Animal):
  def teste(self):
    '''gfgfgf'''

class Passaro(Animal):
  def locomove(self):
    print("Um Passaro Voa")

peixe = Peixe()
elefante = Elefante()
passaro = Passaro()

peixe.locomove()
elefante.locomove()
passaro.locomove()

'''Exemplo de DuckType'''

class pato():
  def nadar(self):
    print("Quack, quack")

  def som(self):
    print("QUAAAAAck")

class PatinhoFeio():
  def nadar(self):
    print("Quãaaa, quãaaa")

  def som(self):
    print("Quãaaaaaa.....")

class pluto():
  def som(self):
    print("Au au au")

class Donald(pato):
  pass

def encontrarPato(animal):
  '''Descobrir se o animal é um pato ou não'''
  if isinstance(animal, pato):
    animal.nadar()
    animal.som()

if __name__ == "__main__":
  Animais= {}
  Animais['Pato'] = pato()
  Animais['Donald'] = Donald()
  Animais['Pluto'] = pluto()
  Animais['PatinhoFeio'] = PatinhoFeio()

  for chave, valor in Animais.items():
    print("Animal: " + chave)
    encontrarPato(valor)

def encontrarPato(animal):
  try:
    animal.nadar()
    animal.som()
  except AttributeError as e:
    print(e)

if __name__ == "__main__":
  dict= {}
  dict['Pato'] = pato()
  dict['Donald'] = Donald()
  dict['Pluto'] = pluto()
  dict['PatinhoFeio'] = PatinhoFeio()

  for chave, valor in Animais.items():
    print("Animal: " + chave)
    encontrarPato(valor)

from abc import ABC, abstractmethod

class A(ABC):
  @abstractmethod
  def Mostrar(self):
    pass

  def Esconder(self):
    pass

class B(A):
  def Mostrar(self):
    print("Sou a Sub classe B")
  def teste(self):
    print("Esse é um teste")

class C(A):
  def Mostrar(self):
    print("Sou a Sub classe C")

#v1 = A()
#v1.Mostrar()

v2 = B()
v2.Mostrar()
v2.teste()

v3 = C()
v3.Mostrar()

class pai():

  def __init__(self, nome):
    self.__nome = nome

  def teste(self):
    print(self.__nome)



class filho(pai):
  def __init__(self, nomef):
    pai.__init__(self,nomef)

  def teste(self):
    pai.teste(self)

teste = filho("Alan")
teste.teste()

!pip install math

mg = (3*12*16*36) ** (1/4)
print(mg)

import math

numeros = (3,12,16,36)

print(math.prod(numeros))